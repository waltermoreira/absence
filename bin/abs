#!/usr/bin/env python

from __future__ import print_function
import sys
import os
import argparse
from textwrap import dedent
from itertools import chain
import absence.driver

class Main(object):

    def __init__(self, driver):
        self.driver = driver

    def backup(self, args):
        for destination in self.get_destinations(args.destination[0]):
            print('*** Backing up to destination:', destination, '\n')
            print(self.driver.backup_to(destination))
        
    def check(self, args):
        for destination in self.get_destinations(args.destination[0]):
            print('*** Checking destination:', destination, '\n')
            print(self.driver.check(destination))
        
    def files(self, args):
        for destination in self.get_destinations(args.destination[0]):
            print('*** Files in:', destination, '\n')
            print(self.driver.list_files(destination))
        
    def destinations(self, args):
        print(dedent(
            """
            Destinations (select with full url or index number)

            Index  Url
            ----------
            """), end='')
        for i, dest in enumerate(self._destinations):
            print('{:>4}:  {}'.format(i, dest))
        print()

    def restore(self, args):
        [from_dest] = self.get_destinations(args.source[0])
        directory = args.directory[0]
        print('\nRestoring from:', from_dest, '\n')
        self.driver.restore(from_dest, directory)

    def cleanup(self, args):
        for destination in self.get_destinations(args.destination[0]):
            print(self.driver.cleanup(destination))
            
    @property
    def _destinations(self):
        return ['all'] + self.driver.destinations
        
    def sources(self, args):
        print(dedent(
            """
            Sources
            -------
            """))
        print('\n'.join(self.driver.sources))
        print()

    def get_destinations(self, dests):
        destinations = dests.split(',')
        def _dest(x):
            try:
                dest = self._destinations[int(x)]
            except (ValueError, IndexError):
                dest = x
            if dest == 'all':
                return self._destinations[1:]
            else:
                return [dest]
        return set(chain.from_iterable(_dest(x) for x in destinations))

        
def main():
    os.environ['PATH'] = os.pathsep.join(['/usr/local/bin', os.environ['PATH']])
    args = parse_args(sys.argv[1:])
    m = Main(absence.driver.create_driver())
    getattr(m, args.subparser_name)(args)

def add_destination_option_to(parser):
    parser.add_argument('-d', '--destination', nargs=1, metavar='dest', default=['all'],
                        help=('comma separated destinations (url or id from "destinations"'
                              'output). "0" or "all" for  all the destinations.'))
        
def parse_args(args):
    parser = argparse.ArgumentParser(description='Backup through duplicity')
    subparsers = parser.add_subparsers(title='subcommands',
                                       dest='subparser_name',
                                       description='valid subcommands')

    parser_backup = subparsers.add_parser('backup', help='perform backup')
    add_destination_option_to(parser_backup)

    parser_check = subparsers.add_parser('check', help='check destination')
    add_destination_option_to(parser_check)

    parser_list = subparsers.add_parser('files', help='list files')
    add_destination_option_to(parser_list)

    parser_destinations = subparsers.add_parser('destinations', help='show destinations')

    parser_sources = subparsers.add_parser('sources', help='show sources')

    parser_restore = subparsers.add_parser('restore', help='restore from a destination to a directory')
    parser_restore.add_argument('-s', '--source', nargs=1, metavar='source', required=True,
                                help='destination name or id from where to restore')
    parser_restore.add_argument('-d', '--directory', nargs=1, metavar='directory', required=True,
                                help='directory under which to restore')

    parser_cleanup = subparsers.add_parser('cleanup', help='cleanup stale files from destination')
    add_destination_option_to(parser_cleanup)
    
    return parser.parse_args(args)

if __name__ == '__main__':
    main()
